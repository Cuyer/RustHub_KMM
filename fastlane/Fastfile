require 'base64'
require 'fileutils'
require 'google/apis/androidpublisher_v3'
require 'googleauth'

default_platform(:android)

def verify_update_priority(json_key, track, expected_priority)
    package_name = CredentialsManager::AppfileConfig.new.package_name
    service = Google::Apis::AndroidpublisherV3::AndroidPublisherService.new
    service.authorization = Google::Auth::ServiceAccountCredentials.make_creds(
        json_key_io: File.open(json_key),
        scope: 'https://www.googleapis.com/auth/androidpublisher'
    )

    edit = service.insert_edit(package_name)
    track_info = service.get_edit_track(package_name, edit.id, track)
    release = track_info.releases&.first
    actual_priority = release&.in_app_update_priority.to_i

    unless actual_priority == expected_priority
        UI.user_error!("Update priority mismatch: expected #{expected_priority}, got #{actual_priority}")
    end

    UI.message("Verified update priority #{actual_priority} for track #{track}")
end

platform :android do
    desc "Bump versionName and versionCode"
    lane :bump_version do
        gradle_file = File.expand_path('../androidApp/build.gradle.kts', __dir__)
        props_file = File.expand_path('../gradle.properties', __dir__)

        gradle = File.read(gradle_file)
        current_code = gradle[/versionCode\s*=\s*(\d+)/, 1].to_i
        new_code = current_code + 1
        File.write(gradle_file, gradle.sub(/versionCode\s*=\s*\d+/, "versionCode = #{new_code}"))

        props = File.read(props_file)
        current_name = props[/VERSION_NAME=(.*)/, 1].strip
        parts = current_name.split('.')
        parts[-1] = (parts[-1].to_i + 1).to_s
        new_name = parts.join('.')
        File.write(props_file, props.sub(/VERSION_NAME=.*/, "VERSION_NAME=#{new_name}"))

        UI.message("Bumped to version #{new_name} (code #{new_code})")
    end

    desc "Upload the Android App Bundle to Google Play"
    lane :publish do |options|
        service_account_json = ENV['SERVICE_ACCOUNT_JSON']
        UI.user_error!("Missing SERVICE_ACCOUNT_JSON environment variable") unless service_account_json

        json_path = File.expand_path('service-account.json', __dir__)
        FileUtils.mkdir_p(File.dirname(json_path))
        File.open(json_path, 'w') { |file| file.write(Base64.decode64(service_account_json)) }

        aab_glob = File.expand_path('../androidApp/build/outputs/bundle/productionRelease/*.aab', __dir__)
        aab_path = options[:aab] || Dir[aab_glob].first
        UI.user_error!("Could not find AAB at #{aab_glob}") unless aab_path

        update_priority = (options[:update_priority] || ENV['UPDATE_PRIORITY'] || 0).to_i
        track = options[:track] || ENV['TRACK']
        release_status = options[:release_status] || ENV['RELEASE_STATUS']

        upload_to_play_store(
            aab: aab_path,
            json_key: json_path,
            track: track,
            release_status: release_status,
            in_app_update_priority: update_priority
        )

        verify_update_priority(json_path, track, update_priority)

        File.delete(json_path) if File.exist?(json_path)
    end
end
