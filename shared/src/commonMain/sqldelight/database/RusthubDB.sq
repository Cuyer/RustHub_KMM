import pl.cuyer.rusthub.data.local.model.DifficultyEntity;
import pl.cuyer.rusthub.data.local.model.FlagEntity;
import pl.cuyer.rusthub.data.local.model.MapsEntity;
import pl.cuyer.rusthub.data.local.model.OrderEntity;
import pl.cuyer.rusthub.data.local.model.RegionEntity;
import pl.cuyer.rusthub.data.local.model.ServerFilterEntity;
import pl.cuyer.rusthub.data.local.model.ServerStatusEntity;
import pl.cuyer.rusthub.data.local.model.WipeScheduleEntity;
import pl.cuyer.rusthub.data.local.model.WipeTypeEntity;

-- =============================================================================
-- Table Definition
-- =============================================================================
CREATE TABLE serverEntity (
    id             INTEGER    NOT NULL PRIMARY KEY,
    name           TEXT       NOT NULL,
    wipe           TEXT,                              -- ISO-8601 timestamp string, e.g. "2025-06-06T21:03:40.00+02:00"
    ranking        INTEGER,
    modded         INTEGER,
    player_count   INTEGER,
    capacity       INTEGER,
    map_name       TEXT       AS MapsEntity,
    cycle          REAL,                              -- the “cycle” float value
    server_flag    TEXT       AS FlagEntity,                -- e.g. "US"
    region         TEXT       AS RegionEntity,
    max_group      INTEGER,
    difficulty     TEXT       AS DifficultyEntity,          -- nullable
    wipe_schedule  TEXT       AS WipeScheduleEntity,
    is_official    INTEGER,
    ip             TEXT,
    map_image      TEXT,                              -- nullable URL/path
    description    TEXT,                               -- nullable long text
    server_status  TEXT       AS ServerStatusEntity,
    wipe_type      TEXT       AS WipeTypeEntity,
    blueprints     INTEGER,
    kits           INTEGER,
    decay          REAL,
    upkeep         REAL,
    rates          INTEGER,
    seed           INTEGER,
    map_size       INTEGER,
    monuments      INTEGER,
    average_fps    INTEGER,
    pve            INTEGER,
    website        TEXT,
    is_premium     INTEGER,
    map_url        TEXT,
    header_image   TEXT,
    rust_next_wipe TEXT,
    rust_next_map_wipe TEXT,
    favourite      INTEGER    NOT NULL DEFAULT 0,
    subscribed     INTEGER    NOT NULL DEFAULT 0
);

-- =============================================================================
-- Paged SELECT
-- =============================================================================
-- Returns a page of servers
findServersPagedFiltered:
SELECT se.*
FROM serverEntity se
CROSS JOIN filtersEntity fe ON fe.id = :id
WHERE
  (fe.ranking IS NULL OR se.ranking <= fe.ranking)
  AND (fe.modded IS NULL OR se.modded = fe.modded)
  AND (fe.player_count IS NULL OR se.player_count <= fe.player_count)
  AND (fe.map_name IS NULL OR se.map_name = fe.map_name)
  AND (fe.server_flag IS NULL OR se.server_flag = fe.server_flag)
  AND (fe.region IS NULL OR se.region = fe.region)
  AND (fe.group_limit IS NULL OR se.max_group <= fe.group_limit)
  AND (fe.difficulty IS NULL OR se.difficulty = fe.difficulty)
  AND (fe.wipe_schedule IS NULL OR se.wipe_schedule = fe.wipe_schedule)
  AND (fe.is_official IS NULL OR se.is_official = fe.is_official)
  AND (fe.filter != 'FAVOURITES' OR se.favourite = 1)
  AND (fe.filter != 'SUBSCRIBED' OR se.subscribed = 1)
  AND (
    fe.sort_order != 'NEXT_WIPE' OR
    MIN(
        CASE WHEN se.rust_next_map_wipe > CURRENT_TIMESTAMP THEN se.rust_next_map_wipe END,
        CASE WHEN se.rust_next_wipe > CURRENT_TIMESTAMP THEN se.rust_next_wipe END
    ) IS NOT NULL
  )
  AND (se.name LIKE '%' || :name || '%' COLLATE NOCASE)
ORDER BY
    CASE WHEN fe.sort_order = 'WIPE' THEN se.wipe END DESC,
    CASE WHEN fe.sort_order = 'PLAYER_COUNT' THEN se.player_count END DESC,
    CASE WHEN fe.sort_order = 'RANK' THEN se.ranking END ASC,
    CASE WHEN fe.sort_order = 'NEXT_WIPE' THEN
        MIN(
            CASE WHEN se.rust_next_map_wipe > CURRENT_TIMESTAMP THEN se.rust_next_map_wipe END,
            CASE WHEN se.rust_next_wipe > CURRENT_TIMESTAMP THEN se.rust_next_wipe END
        )
    END ASC
LIMIT :limit OFFSET :offset;

countPagedServersFiltered:
SELECT COUNT(*)
FROM serverEntity se
CROSS JOIN filtersEntity fe ON fe.id = :id
WHERE
  (fe.wipe IS NULL OR date(se.wipe) >= date(fe.wipe))
  AND (fe.ranking IS NULL OR se.ranking <= fe.ranking)
  AND (fe.modded IS NULL OR se.modded = fe.modded)
  AND (fe.player_count IS NULL OR se.player_count <= fe.player_count)
  AND (fe.map_name IS NULL OR se.map_name = fe.map_name)
  AND (fe.server_flag IS NULL OR se.server_flag = fe.server_flag)
  AND (fe.region IS NULL OR se.region = fe.region)
  AND (fe.group_limit IS NULL OR se.max_group <= fe.group_limit)
  AND (fe.difficulty IS NULL OR se.difficulty = fe.difficulty)
  AND (fe.wipe_schedule IS NULL OR se.wipe_schedule = fe.wipe_schedule)
  AND (fe.is_official IS NULL OR se.is_official = fe.is_official)
  AND (fe.filter != 'FAVOURITES' OR se.favourite = 1)
  AND (fe.filter != 'SUBSCRIBED' OR se.subscribed = 1)
  AND (
    fe.sort_order != 'NEXT_WIPE' OR
    MIN(
        CASE WHEN se.rust_next_map_wipe > CURRENT_TIMESTAMP THEN se.rust_next_map_wipe END,
        CASE WHEN se.rust_next_wipe > CURRENT_TIMESTAMP THEN se.rust_next_wipe END
    ) IS NOT NULL
  )
  AND (se.name LIKE '%' || :name || '%' COLLATE NOCASE);

-- =============================================================================
-- Upsert (Insert or Update on id conflict)
-- =============================================================================
upsertServers:
INSERT INTO serverEntity (
    id,
    name,
    wipe,
    ranking,
    modded,
    player_count,
    capacity,
    map_name,
    cycle,
    server_flag,
    region,
    max_group,
    difficulty,
    wipe_schedule,
    is_official,
    ip,
    description,
    server_status,
    wipe_type,
    blueprints,
    kits,
    decay,
    upkeep,
    rates,
    seed,
    map_size,
    map_image,
    average_fps,
    pve,
    website,
    is_premium,
    map_url,
    header_image,
    monuments,
    rust_next_wipe,
    rust_next_map_wipe,
    favourite,
    subscribed
) VALUES (
    :id,
    :name,
    :wipe,                                -- ISO-8601 timestamp string
    :ranking,
    CASE WHEN :modded THEN 1 ELSE 0 END,  -- bind a boolean
    :playerCount,
    :capacity,
    :mapName,
    :cycle,
    :serverFlag,
    :region,
    :maxGroup,
    :difficulty,
    :wipeSchedule,
    CASE WHEN :isOfficial THEN 1 ELSE 0 END,
    :ip,
    :description,
    :server_status,
    :wipe_type,
    CASE WHEN :blueprints THEN 1 ELSE 0 END,
    CASE WHEN :kits THEN 1 ELSE 0 END,
    :decay,
    :upkeep,
    :rates,
    :seed,
    :mapSize,
    :mapImage,
    :averageFps,
    CASE WHEN :pve THEN 1 ELSE 0 END,
    :website,
    CASE WHEN :isPremium THEN 1 ELSE 0 END,
    :mapUrl,
    :headerImage,
    :monuments,
    :nextWipe,
    :nextMapWipe,
    CASE WHEN :favourite THEN 1 ELSE 0 END,
    CASE WHEN :subscribed THEN 1 ELSE 0 END
) ON CONFLICT(id) DO UPDATE SET
    name           = excluded.name,
    wipe           = excluded.wipe,
    ranking        = excluded.ranking,
    modded         = excluded.modded,
    player_count   = excluded.player_count,
    capacity       = excluded.capacity,
    map_name       = excluded.map_name,
    cycle          = excluded.cycle,
    server_flag    = excluded.server_flag,
    region         = excluded.region,
    max_group      = excluded.max_group,
    difficulty     = excluded.difficulty,
    wipe_schedule  = excluded.wipe_schedule,
    is_official    = excluded.is_official,
    ip             = excluded.ip,
    description    = excluded.description,
    server_status  = excluded.server_status,
    wipe_type      = excluded.wipe_type,
    blueprints     = excluded.blueprints,
    kits           = excluded.kits,
    decay          = excluded.decay,
    upkeep         = excluded.upkeep,
    rates          = excluded.rates,
    seed           = excluded.seed,
    map_size       = excluded.map_size,
    map_image      = excluded.map_image,
    monuments      = excluded.monuments,
    average_fps    = excluded.average_fps,
    pve            = excluded.pve,
    website        = excluded.website,
    is_premium     = excluded.is_premium,
    map_url        = excluded.map_url,
    header_image   = excluded.header_image,
    rust_next_wipe = excluded.rust_next_wipe,
    rust_next_map_wipe = excluded.rust_next_map_wipe,
    favourite      = excluded.favourite,
    subscribed     = excluded.subscribed;

clearServers:
DELETE FROM serverEntity;

countServers:
SELECT COUNT(*) FROM serverEntity;


getServerById:
SELECT * FROM serverEntity WHERE id == :id;

updateFavourite:
UPDATE serverEntity SET favourite = CASE WHEN :favourite THEN 1 ELSE 0 END WHERE id = :id;

updateSubscription:
UPDATE serverEntity SET subscribed = CASE WHEN :subscribed THEN 1 ELSE 0 END WHERE id = :id;


CREATE TABLE filtersEntity (
    id             TEXT    NOT NULL PRIMARY KEY,
    wipe           TEXT,                              -- ISO-8601 timestamp string, e.g. "2025-06-06T21:03:40.00+02:00"
    ranking        INTEGER,
    modded         INTEGER,     -- store booleans as 0/1
    player_count   INTEGER,
    map_name       TEXT       AS MapsEntity,                       -- the “cycle” float value
    server_flag    TEXT       AS FlagEntity,                -- e.g. "US"
    region         TEXT       AS RegionEntity,
    group_limit    INTEGER,
    difficulty     TEXT       AS DifficultyEntity,          -- nullable
    wipe_schedule  TEXT       AS WipeScheduleEntity,
    is_official    INTEGER,
    filter         TEXT       AS ServerFilterEntity,
    sort_order     TEXT       AS OrderEntity
);

upsertFilters:
INSERT INTO filtersEntity (
    id,
    wipe,
    ranking,
    player_count,
    map_name,
    server_flag,
    region,
    group_limit,
    difficulty,
    wipe_schedule,
    modded,
    is_official,
    filter,
    sort_order
) VALUES (
        :id,
        :wipe,
        :ranking,
        :player_count,
        :map_name,
        :server_flag,
        :region,
        :group_limit,
        :difficulty,
    :wipe_schedule,
    :modded,
    :is_official,
    :filter,
    :sort_order
) ON CONFLICT(id) DO UPDATE SET
    id = excluded.id,
    wipe = excluded.wipe,
    ranking = excluded.ranking,
    player_count = excluded.player_count,
    map_name = excluded.map_name,
    server_flag = excluded.server_flag,
    region = excluded.region,
    group_limit = excluded.group_limit,
    difficulty = excluded.difficulty,
    wipe_schedule = excluded.wipe_schedule,
    modded = excluded.modded,
    is_official = excluded.is_official,
    filter = excluded.filter,
    sort_order = excluded.sort_order;

clearFilters:
DELETE FROM filtersEntity;

getFilters:
SELECT * FROM filtersEntity WHERE id = ?;

CREATE TABLE remoteKeyEntity (
    id            TEXT    NOT NULL PRIMARY KEY,
    next_page     INTEGER,
    last_updated  INTEGER NOT NULL
);

upsertRemoteKey:
INSERT INTO remoteKeyEntity (
    id,
    next_page,
    last_updated
) VALUES (
    :id,
    :next_page,
    :last_updated
) ON CONFLICT(id) DO UPDATE SET
    next_page = excluded.next_page,
    last_updated = excluded.last_updated;

clearRemoteKeys:
DELETE FROM remoteKeyEntity;

getRemoteKey:
SELECT * FROM remoteKeyEntity WHERE id = ?;

CREATE TABLE filtersOptionsEntity (
    id TEXT NOT NULL PRIMARY KEY,
    max_ranking INTEGER NOT NULL,
    max_player_count INTEGER NOT NULL,
    max_group_limit INTEGER NOT NULL
);

CREATE TABLE filtersFlagEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersMapEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersRegionEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersDifficultyEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersWipeScheduleEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);


upsertFiltersOptions:
INSERT INTO filtersOptionsEntity (
    id,
    max_ranking,
    max_player_count,
    max_group_limit
) VALUES (
    :id,
    :max_ranking,
    :max_player_count,
    :max_group_limit
) ON CONFLICT(id) DO UPDATE SET
    max_ranking = excluded.max_ranking,
    max_player_count = excluded.max_player_count,
    max_group_limit = excluded.max_group_limit;

getFiltersOptions:
SELECT * FROM filtersOptionsEntity WHERE id = ?;

clearFiltersOptions:
DELETE FROM filtersOptionsEntity;

-- Flags
upsertFiltersFlag:
INSERT INTO filtersFlagEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersFlags:
SELECT * FROM filtersFlagEntity;

clearFiltersFlags:
DELETE FROM filtersFlagEntity;

-- Maps
upsertFiltersMap:
INSERT INTO filtersMapEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersMaps:
SELECT * FROM filtersMapEntity;

clearFiltersMaps:
DELETE FROM filtersMapEntity;

-- Regions
upsertFiltersRegion:
INSERT INTO filtersRegionEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersRegions:
SELECT * FROM filtersRegionEntity;

clearFiltersRegions:
DELETE FROM filtersRegionEntity;

-- Difficulty
upsertFiltersDifficulty:
INSERT INTO filtersDifficultyEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersDifficulty:
SELECT * FROM filtersDifficultyEntity;

clearFiltersDifficulty:
DELETE FROM filtersDifficultyEntity;

-- Wipe schedules
upsertFiltersWipeSchedule:
INSERT INTO filtersWipeScheduleEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersWipeSchedules:
SELECT * FROM filtersWipeScheduleEntity;

clearFiltersWipeSchedules:
DELETE FROM filtersWipeScheduleEntity;

CREATE TABLE searchQueryEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    query TEXT NOT NULL UNIQUE,
    timestamp TEXT NOT NULL
);

upsertSearchQuery:
INSERT INTO searchQueryEntity (query, timestamp)
VALUES (:query, :timestamp)
ON CONFLICT(query) DO UPDATE SET
    timestamp = excluded.timestamp;

getSearchQueries:
SELECT * FROM searchQueryEntity
ORDER BY timestamp DESC;

clearSearchQueries:
DELETE FROM searchQueryEntity;

deleteSearchQueryByQuery:
DELETE FROM searchQueryEntity WHERE query = :query;

CREATE TABLE itemSearchQueryEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    query TEXT NOT NULL UNIQUE,
    timestamp TEXT NOT NULL
);

upsertItemSearchQuery:
INSERT INTO itemSearchQueryEntity (query, timestamp)
VALUES (:query, :timestamp)
ON CONFLICT(query) DO UPDATE SET
    timestamp = excluded.timestamp;

getItemSearchQueries:
SELECT * FROM itemSearchQueryEntity
ORDER BY timestamp DESC;

clearItemSearchQueries:
DELETE FROM itemSearchQueryEntity;

deleteItemSearchQueryByQuery:
DELETE FROM itemSearchQueryEntity WHERE query = :query;

CREATE TABLE favouriteSyncEntity (
    server_id INTEGER NOT NULL PRIMARY KEY,
    action INTEGER NOT NULL,
    sync_state TEXT NOT NULL
);

CREATE TABLE subscriptionSyncEntity (
    server_id INTEGER NOT NULL PRIMARY KEY,
    action INTEGER NOT NULL,
    sync_state TEXT NOT NULL
);

upsertFavouriteSync:
INSERT INTO favouriteSyncEntity (server_id, action, sync_state)
VALUES (:server_id, :action, :sync_state)
ON CONFLICT(server_id) DO UPDATE SET
    action = excluded.action,
    sync_state = excluded.sync_state;

getPendingFavouriteSync:
SELECT * FROM favouriteSyncEntity WHERE sync_state = 'PENDING';

deleteFavouriteSync:
DELETE FROM favouriteSyncEntity WHERE server_id = :server_id;

upsertSubscriptionSync:
INSERT INTO subscriptionSyncEntity (server_id, action, sync_state)
VALUES (:server_id, :action, :sync_state)
ON CONFLICT(server_id) DO UPDATE SET
    action = excluded.action,
    sync_state = excluded.sync_state;

getPendingSubscriptionSync:
SELECT * FROM subscriptionSyncEntity WHERE sync_state = 'PENDING';

deleteSubscriptionSync:
DELETE FROM subscriptionSyncEntity WHERE server_id = :server_id;

clearFavouriteSync:
DELETE FROM favouriteSyncEntity;

clearSubscriptionSync:
DELETE FROM subscriptionSyncEntity;

CREATE TABLE purchaseSyncEntity (
    token TEXT NOT NULL PRIMARY KEY,
    product_id TEXT,
    sync_state TEXT NOT NULL
);

upsertPurchaseSync:
INSERT INTO purchaseSyncEntity (token, product_id, sync_state)
VALUES (:token, :product_id, :sync_state)
ON CONFLICT(token) DO UPDATE SET
    product_id = excluded.product_id,
    sync_state = excluded.sync_state;

getPendingPurchaseSync:
SELECT * FROM purchaseSyncEntity WHERE sync_state = 'PENDING';

deletePurchaseSync:
DELETE FROM purchaseSyncEntity WHERE token = :token;

clearPurchaseSync:
DELETE FROM purchaseSyncEntity;

CREATE TABLE userEntity (
  id TEXT NOT NULL PRIMARY KEY,
  email         TEXT,
  username      TEXT   NOT NULL,
  access_token  TEXT   NOT NULL,
  refresh_token TEXT,
  obfuscated_id TEXT,
  provider TEXT NOT NULL DEFAULT 'LOCAL',
  subscribed INTEGER NOT NULL DEFAULT 0,
  email_confirmed INTEGER NOT NULL DEFAULT 0
);

insertUser:
INSERT INTO userEntity (
id, email, username, access_token, refresh_token, obfuscated_id, provider, subscribed, email_confirmed
) VALUES (
  :id, :email, :username, :accessToken, :refreshToken, :obfuscatedId, :provider, :subscribed, :emailConfirmed
)
ON CONFLICT(id) DO UPDATE SET
  email = excluded.email,
  username = excluded.username,
  access_token  = excluded.access_token,
  refresh_token = excluded.refresh_token,
  obfuscated_id = excluded.obfuscated_id,
  provider = excluded.provider,
  subscribed = excluded.subscribed,
  email_confirmed = excluded.email_confirmed;

deleteUser:
DELETE FROM userEntity;

getUser:
SELECT * FROM userEntity LIMIT 1;

updateEmailConfirmed:
UPDATE userEntity SET email_confirmed = CASE WHEN :confirmed THEN 1 ELSE 0 END WHERE id = :id;

updateSubscribed:
UPDATE userEntity SET subscribed = CASE WHEN :subscribed THEN 1 ELSE 0 END WHERE id = :id;

CREATE TABLE itemEntity (
    id INTEGER NOT NULL ,
    slug TEXT,
    url TEXT,
    name TEXT,
    description TEXT,
    image TEXT,
    stack_size INTEGER,
    health INTEGER,
    categories TEXT,
    short_name TEXT,
    icon_url TEXT,
    language TEXT NOT NULL,
    looting TEXT,
    loot_contents TEXT,
    where_to_find TEXT,
    crafting TEXT,
    recycling TEXT,
    raiding TEXT,
    PRIMARY KEY(id, language)
);

upsertItem:
INSERT INTO itemEntity (
    id,
    slug,
    url,
    name,
    description,
    image,
    stack_size,
    health,
    categories,
    short_name,
    icon_url,
    language,
    looting,
    loot_contents,
    where_to_find,
    crafting,
    recycling,
    raiding
) VALUES (
    :id,
    :slug,
    :url,
    :name,
    :description,
    :image,
    :stackSize,
    :health,
    :categories,
    :shortName,
    :iconUrl,
    :language,
    :looting,
    :lootContents,
    :whereToFind,
    :crafting,
    :recycling,
    :raiding
) ON CONFLICT(id, language) DO UPDATE SET
    slug = excluded.slug,
    url = excluded.url,
    name = excluded.name,
    description = excluded.description,
    image = excluded.image,
    stack_size = excluded.stack_size,
    health = excluded.health,
    categories = excluded.categories,
    short_name = excluded.short_name,
    icon_url = excluded.icon_url,
    language = excluded.language,
    looting = excluded.looting,
    loot_contents = excluded.loot_contents,
    where_to_find = excluded.where_to_find,
    crafting = excluded.crafting,
    recycling = excluded.recycling,
    raiding = excluded.raiding;

getItems:
SELECT * FROM itemEntity WHERE language = :language;

deleteItems:
DELETE FROM itemEntity;

countItems:
SELECT COUNT(*) FROM itemEntity WHERE language = :language;

getItemById:
SELECT * FROM itemEntity WHERE id = :id AND language = :language;

-- Returns a page of items filtered by query and category
findItemsPagedFiltered:
SELECT *
FROM itemEntity
WHERE (:category IS NULL OR categories LIKE '%' || :category || '%')
  AND (name LIKE '%' || :name || '%' COLLATE NOCASE)
  AND language = :language
ORDER BY name
LIMIT :limit OFFSET :offset;

countPagedItemsFiltered:
SELECT COUNT(*)
FROM itemEntity
WHERE (:category IS NULL OR categories LIKE '%' || :category || '%')
  AND (name LIKE '%' || :name || '%' COLLATE NOCASE)
  AND language = :language;

CREATE TABLE itemSyncEntity (
    id TEXT NOT NULL PRIMARY KEY,
    sync_state TEXT NOT NULL
);

upsertItemSync:
INSERT INTO itemSyncEntity (id, sync_state)
VALUES (:id, :sync_state)
ON CONFLICT(id) DO UPDATE SET
    sync_state = excluded.sync_state;

getItemSync:
SELECT * FROM itemSyncEntity WHERE id = :id;

clearItemSync:
DELETE FROM itemSyncEntity;
