import pl.cuyer.rusthub.data.local.model.DifficultyEntity;
import pl.cuyer.rusthub.data.local.model.FlagEntity;
import pl.cuyer.rusthub.data.local.model.MapsEntity;
import pl.cuyer.rusthub.data.local.model.RegionEntity;
import pl.cuyer.rusthub.data.local.model.WipeScheduleEntity;
import pl.cuyer.rusthub.data.local.model.OrderEntity;

-- =============================================================================
-- Table Definition
-- =============================================================================
CREATE TABLE serverEntity (
    id             INTEGER    NOT NULL PRIMARY KEY,
    name           TEXT       NOT NULL,
    wipe           TEXT,                              -- ISO-8601 timestamp string, e.g. "2025-06-06T21:03:40.00+02:00"
    ranking        INTEGER,
    modded         INTEGER    NOT NULL DEFAULT 0,     -- store booleans as 0/1
    player_count   INTEGER,
    capacity       INTEGER,
    map_name       TEXT       AS MapsEntity,
    cycle          REAL,                              -- the “cycle” float value
    server_flag    TEXT       AS FlagEntity,                -- e.g. "US"
    region         TEXT       AS RegionEntity,
    max_group      INTEGER,
    difficulty     TEXT       AS DifficultyEntity,          -- nullable
    wipe_schedule  TEXT       AS WipeScheduleEntity,
    is_official    INTEGER    NOT NULL DEFAULT 0,
    ip             TEXT,
    map_image      TEXT,                              -- nullable URL/path
    description    TEXT,                               -- nullable long text
    favourite      INTEGER    NOT NULL DEFAULT 0
);

-- =============================================================================
-- Paged SELECT
-- =============================================================================
-- Returns a page of servers
findServersPagedFiltered:
SELECT *
FROM serverEntity
WHERE
  (:ranking IS NULL OR ranking <= :ranking)
  AND (:modded IS NULL OR modded = :modded)
  AND (:player_count IS NULL OR player_count <= :player_count)
  AND(:map_name IS NULL OR map_name = :map_name)
  AND (:server_flag IS NULL OR server_flag = :server_flag)
  AND (:region IS NULL OR region = :region)
  AND (:group_limit IS NULL OR max_group <= :group_limit)
  AND (:difficulty IS NULL OR difficulty = :difficulty)
  AND (:wipe_schedule IS NULL OR wipe_schedule = :wipe_schedule)
  AND (:is_official IS NULL OR is_official = :is_official)
  ORDER BY
    CASE WHEN :order = 'WIPE' THEN wipe END DESC,
    CASE WHEN :order = 'PLAYER_COUNT' THEN player_count END DESC,
    CASE WHEN :order = 'RANK' THEN ranking END ASC
LIMIT :limit OFFSET :offset;

countPagedServersFiltered:
SELECT COUNT(*)
FROM serverEntity
WHERE
  (:wipe IS NULL OR date(wipe) >= date(:wipe))
  AND (:ranking IS NULL OR ranking <= :ranking)
  AND (:modded IS NULL OR modded = :modded)
  AND (:player_count IS NULL OR player_count <= :player_count)
  AND(:map_name IS NULL OR map_name = :map_name)
  AND (:server_flag IS NULL OR server_flag = :server_flag)
  AND (:region IS NULL OR region = :region)
  AND (:group_limit IS NULL OR max_group <= :group_limit)
  AND (:difficulty IS NULL OR difficulty = :difficulty)
  AND (:wipe_schedule IS NULL OR wipe_schedule = :wipe_schedule)
  AND (:is_official IS NULL OR is_official = :is_official);

-- =============================================================================
-- Upsert (Insert or Update on id conflict)
-- =============================================================================
upsertServers:
INSERT INTO serverEntity (
    id,
    name,
    wipe,
    ranking,
    modded,
    player_count,
    capacity,
    map_name,
    cycle,
    server_flag,
    region,
    max_group,
    difficulty,
    wipe_schedule,
    is_official,
    ip,
    description
) VALUES (
    :id,
    :name,
    :wipe,                                -- ISO-8601 timestamp string
    :ranking,
    CASE WHEN :modded THEN 1 ELSE 0 END,  -- bind a boolean
    :playerCount,
    :capacity,
    :mapName,
    :cycle,
    :serverFlag,
    :region,
    :maxGroup,
    :difficulty,
    :wipeSchedule,
    CASE WHEN :isOfficial THEN 1 ELSE 0 END,
    :ip,
    :description
) ON CONFLICT(id) DO UPDATE SET
    name           = excluded.name,
    wipe           = excluded.wipe,
    ranking        = excluded.ranking,
    modded         = excluded.modded,
    player_count   = excluded.player_count,
    capacity       = excluded.capacity,
    map_name       = excluded.map_name,
    cycle          = excluded.cycle,
    server_flag    = excluded.server_flag,
    region         = excluded.region,
    max_group      = excluded.max_group,
    difficulty     = excluded.difficulty,
    wipe_schedule  = excluded.wipe_schedule,
    is_official    = excluded.is_official,
    ip             = excluded.ip,
    description    = excluded.description;

clearServers:
DELETE FROM serverEntity;


CREATE TABLE filtersEntity (
    id             TEXT    NOT NULL PRIMARY KEY,
    wipe           TEXT,                              -- ISO-8601 timestamp string, e.g. "2025-06-06T21:03:40.00+02:00"
    ranking        INTEGER,
    modded         INTEGER    NOT NULL DEFAULT 0,     -- store booleans as 0/1
    player_count   INTEGER,
    map_name       TEXT       AS MapsEntity,                       -- the “cycle” float value
    server_flag    TEXT       AS FlagEntity,                -- e.g. "US"
    region         TEXT       AS RegionEntity,
    group_limit    INTEGER,
    difficulty     TEXT       AS DifficultyEntity,          -- nullable
    wipe_schedule  TEXT       AS WipeScheduleEntity,
    is_official    INTEGER    NOT NULL DEFAULT 0,
    sort_order     TEXT       AS OrderEntity
);

upsertFilters:
INSERT INTO filtersEntity (
    id,
    wipe,
    ranking,
    player_count,
    map_name,
    server_flag,
    region,
    group_limit,
    difficulty,
    wipe_schedule,
    modded,
    is_official,
    sort_order
) VALUES (
        :id,
        :wipe,
        :ranking,
        :player_count,
        :map_name,
        :server_flag,
        :region,
        :group_limit,
        :difficulty,
        :wipe_schedule,
        :modded,
        :is_official,
        :sort_order
) ON CONFLICT(id) DO UPDATE SET
    id = excluded.id,
    wipe = excluded.wipe,
    ranking = excluded.ranking,
    player_count = excluded.player_count,
    map_name = excluded.map_name,
    server_flag = excluded.server_flag,
    region = excluded.region,
    group_limit = excluded.group_limit,
    difficulty = excluded.difficulty,
    wipe_schedule = excluded.wipe_schedule,
    modded = excluded.modded,
    is_official = excluded.is_official,
    sort_order = excluded.sort_order;

clearFilters:
DELETE FROM filtersEntity;

getFilters:
SELECT * FROM filtersEntity WHERE id = ?;

CREATE TABLE remoteKeyEntity (
    id            TEXT    NOT NULL PRIMARY KEY,
    next_page     INTEGER,
    last_updated  INTEGER NOT NULL
);

upsertRemoteKey:
INSERT INTO remoteKeyEntity (
    id,
    next_page,
    last_updated
) VALUES (
    :id,
    :next_page,
    :last_updated
) ON CONFLICT(id) DO UPDATE SET
    next_page = excluded.next_page,
    last_updated = excluded.last_updated;

clearRemoteKeys:
DELETE FROM remoteKeyEntity;

getRemoteKey:
SELECT * FROM remoteKeyEntity WHERE id = ?;

CREATE TABLE filtersOptionsEntity (
    id TEXT NOT NULL PRIMARY KEY,
    max_ranking INTEGER NOT NULL,
    max_player_count INTEGER NOT NULL,
    max_group_limit INTEGER NOT NULL
);

CREATE TABLE filtersFlagEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersMapEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersRegionEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersDifficultyEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);

CREATE TABLE filtersWipeScheduleEntity (
    id TEXT NOT NULL PRIMARY KEY,
    label TEXT NOT NULL
);


upsertFiltersOptions:
INSERT INTO filtersOptionsEntity (
    id,
    max_ranking,
    max_player_count,
    max_group_limit
) VALUES (
    :id,
    :max_ranking,
    :max_player_count,
    :max_group_limit
) ON CONFLICT(id) DO UPDATE SET
    max_ranking = excluded.max_ranking,
    max_player_count = excluded.max_player_count,
    max_group_limit = excluded.max_group_limit;

getFiltersOptions:
SELECT * FROM filtersOptionsEntity WHERE id = ?;

clearFiltersOptions:
DELETE FROM filtersOptionsEntity;

-- Flags
upsertFiltersFlag:
INSERT INTO filtersFlagEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersFlags:
SELECT * FROM filtersFlagEntity;

clearFiltersFlags:
DELETE FROM filtersFlagEntity;

-- Maps
upsertFiltersMap:
INSERT INTO filtersMapEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersMaps:
SELECT * FROM filtersMapEntity;

clearFiltersMaps:
DELETE FROM filtersMapEntity;

-- Regions
upsertFiltersRegion:
INSERT INTO filtersRegionEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersRegions:
SELECT * FROM filtersRegionEntity;

clearFiltersRegions:
DELETE FROM filtersRegionEntity;

-- Difficulty
upsertFiltersDifficulty:
INSERT INTO filtersDifficultyEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersDifficulty:
SELECT * FROM filtersDifficultyEntity;

clearFiltersDifficulty:
DELETE FROM filtersDifficultyEntity;

-- Wipe schedules
upsertFiltersWipeSchedule:
INSERT INTO filtersWipeScheduleEntity (
    id,
    label
) VALUES (
    :id,
    :label
) ON CONFLICT(id) DO UPDATE SET
    label = excluded.label;

getFiltersWipeSchedules:
SELECT * FROM filtersWipeScheduleEntity;

clearFiltersWipeSchedules:
DELETE FROM filtersWipeScheduleEntity;